{"version":3,"sources":["life.ts","index.tsx"],"names":["Board","board","generation","width","height","this","Array","from","fill","b","y","x","setCell","getCell","cnt","dy","dx","nx","ny","Number","cell","arround","Cell","handleClick","className","style","background","border","padding","lineHeight","marginTop","marginRight","onMouseDown","e","nativeEvent","which","boardElem","row","push","key","display","onContextMenu","preventDefault","App","useState","Life","setBoard","undefined","timerID","setTimerID","runInterval","setRunInterval","step","clone","stop","clearInterval","onClick","disabled","setInterval","clear","type","min","max","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfe6a9d6.chunk.js","sourcesContent":["export type Cell = boolean;\n\nexport class Board {\n  board: Array<Array<Cell>>;\n  generation: number;\n  readonly width: number = 20;\n  readonly height: number = 20;\n\n  constructor() {\n    this.board = Array.from(new Array(this.height), () => new Array(this.width).fill(false));\n    this.generation = 0;\n  }\n\n  clone(): Board {\n    const b = new Board();\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        b.setCell(x, y, this.getCell(x, y));\n      }\n    }\n    b.generation = this.generation;\n    return b;\n  }\n\n  arround(x: number, y: number): number {\n    let cnt = 0;\n    for (let dy = -1; dy <= 1; dy++) {\n      for (let dx = -1; dx <= 1; dx++) {\n        if (dx === 0 && dy === 0) continue;\n        const nx = x + dx;\n        const ny = y + dy;\n        if (nx < 0 || nx >= this.width || ny < 0 || ny >= this.height) continue;\n        cnt += Number(this.board[y + dy][x + dx]);\n      }\n    }\n    return cnt;\n  }\n\n  getCell(x: number, y: number): Cell {\n    return this.board[y][x];\n  }\n\n  setCell(x: number, y: number, cell: Cell) {\n    this.board[y][x] = cell;\n  }\n\n  step() {\n    const board = Array.from(new Array(this.height), () => new Array(this.width).fill(false));\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        switch (this.arround(x, y)) {\n          case 2:\n            board[y][x] = this.board[y][x];\n            break;\n          case 3:\n            board[y][x] = true;\n            break;\n          default:\n            board[y][x] = false;\n            break;\n        }\n      }\n    }\n    this.board = board;\n    this.generation++;\n  }\n\n  clear() {\n    this.board = Array.from(new Array(this.height), () => new Array(this.width).fill(false));\n    this.generation = 0;\n  }\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Life from \"./life\";\n\nconst cellSize = 20;\n\ntype CellProps = {\n  cell: Life.Cell;\n  handleClick: (cell: Life.Cell) => void;\n};\n\nconst Cell: React.SFC<CellProps> = ({ cell, handleClick }) => {\n  return (\n    <div\n      className=\"cell\"\n      style={{\n        background: cell ? \"lightgreen\" : \"white\",\n        border: \"1px solid #000\",\n        padding: 0,\n        width: cellSize,\n        height: cellSize,\n        lineHeight: cellSize,\n        marginTop: -1,\n        marginRight: -1,\n      }}\n      onMouseDown={(e) => {\n        switch (e.nativeEvent.which) {\n          case 1:\n            handleClick(true);\n            break;\n          case 3:\n            handleClick(false);\n            break;\n          default:\n            break;\n        }\n      }}\n    ></div>\n  );\n};\n\ntype BoardProps = {\n  board: Life.Board;\n  handleClick: (x: number, y: number, cell: Life.Cell) => void;\n};\n\nconst Board: React.SFC<BoardProps> = ({ board, handleClick }) => {\n  // const [leftClick, setLeftClick] = useState(false);\n\n  const boardElem = [];\n  for (let y = 0; y < board.height; y++) {\n    const row = [];\n    for (let x = 0; x < board.width; x++) {\n      row.push(\n        <Cell key={x} cell={board.getCell(x, y)} handleClick={(cell) => handleClick(x, y, cell)} />\n      );\n    }\n    boardElem.push(\n      <div key={y} className=\"board-row\">\n        {row}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"board\"\n      style={{\n        display: \"flex\",\n        width: cellSize * (board.width + 1),\n        height: cellSize * (board.height + 1),\n      }}\n      onContextMenu={(e) => e.preventDefault()}\n      // onMouseDown={(e) => {\n      //   if (e.nativeEvent.which === 1) {\n      //     setLeftClick(true);\n      //   }\n      // }}\n      // onMouseUp={(e) => {\n      //   if (e.nativeEvent.which === 1) {\n      //     setLeftClick(false);\n      //   }\n      // }}\n      // onMouseLeave={() => {\n      //   setLeftClick(false);\n      // }}\n    >\n      {boardElem}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [board, setBoard] = useState(new Life.Board());\n  const [timerID, setTimerID] = useState<NodeJS.Timeout | undefined>(undefined);\n  const [runInterval, setRunInterval] = useState(50);\n\n  const handleClick = (x: number, y: number, cell: Life.Cell) => {\n    setBoard((board) => {\n      const clone = board.clone();\n      clone.setCell(x, y, cell);\n      return clone;\n    });\n  };\n\n  const step = () => {\n    setBoard((board) => {\n      const clone = board.clone();\n      clone.step();\n      return clone;\n    });\n  };\n\n  const run = () => {\n    if (timerID !== undefined) return;\n    setTimerID(setInterval(step, runInterval));\n  };\n\n  const stop = () => {\n    if (timerID === undefined) return;\n    clearInterval(timerID);\n    setTimerID(undefined);\n  };\n\n  const clear = () => {\n    if (timerID !== undefined) {\n      stop();\n    }\n    setBoard((board) => {\n      const clone = board.clone();\n      clone.clear();\n      return clone;\n    });\n  };\n\n  return (\n    <div>\n      <Board board={board} handleClick={handleClick} />\n      <div>\n        <button onClick={step}>step</button>\n        <button disabled={timerID !== undefined} onClick={run}>\n          run\n        </button>\n        <button disabled={timerID === undefined} onClick={stop}>\n          stop\n        </button>\n        <button onClick={clear}>clear</button>\n        <input\n          type=\"range\"\n          min=\"10\"\n          max=\"500\"\n          step=\"10\"\n          value={runInterval}\n          disabled={timerID !== undefined}\n          onChange={(e) => setRunInterval(Number(e.target.value))}\n        />\n        <span>{runInterval}(ms)</span>\n        <span>{board.generation}世代</span>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}